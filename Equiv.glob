DIGEST e067f6319f53a5b85251e952c47adb9f
FEquiv
R98:110 Coq.Bool.Bool <> <> lib
R128:142 Coq.Arith.Arith <> <> lib
R160:174 Coq.Arith.EqNat <> <> lib
R192:206 Coq.omega.Omega <> <> lib
R224:237 Coq.Lists.List <> <> lib
R255:288 Coq.Logic.FunctionalExtensionality <> <> lib
R328:331 Maps <> <> lib
R349:351 Imp <> <> lib
def 2625:2630 <> aequiv
R2641:2644 Imp <> aexp ind
R2670:2674 Imp <> state def
R2693:2695 Coq.Init.Logic <> :type_scope:x_'='_x not
R2682:2686 Imp <> aeval def
R2691:2692 Equiv <> a1 var
R2688:2689 Equiv <> st var
R2696:2700 Imp <> aeval def
R2705:2706 Equiv <> a2 var
R2702:2703 Equiv <> st var
def 2721:2726 <> bequiv
R2737:2740 Imp <> bexp ind
R2766:2770 Imp <> state def
R2789:2791 Coq.Init.Logic <> :type_scope:x_'='_x not
R2778:2782 Imp <> beval def
R2787:2788 Equiv <> b1 var
R2784:2785 Equiv <> st var
R2792:2796 Imp <> beval def
R2801:2802 Equiv <> b2 var
R2798:2799 Equiv <> st var
prf 2911:2924 <> aequiv_example
R2929:2934 Equiv <> aequiv def
R2962:2965 Imp <> ANum constr
R2937:2942 Imp <> AMinus constr
R2953:2955 Imp <> AId constr
R2957:2957 Imp <> X def
R2945:2947 Imp <> AId constr
R2949:2949 Imp <> X def
prf 3019:3032 <> bequiv_example
R3037:3042 Equiv <> bequiv def
R3084:3088 Imp <> BTrue constr
R3045:3047 Imp <> BEq constr
R3075:3078 Imp <> ANum constr
R3050:3055 Imp <> AMinus constr
R3066:3068 Imp <> AId constr
R3070:3070 Imp <> X def
R3058:3060 Imp <> AId constr
R3062:3062 Imp <> X def
R3118:3122 Imp <> beval def
R3135:3148 Equiv <> aequiv_example thm
R3135:3148 Equiv <> aequiv_example thm
R3135:3148 Equiv <> aequiv_example thm
def 3846:3851 <> cequiv
R3862:3864 Imp <> com ind
R3896:3900 Imp <> state def
R3908:3908 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R3923:3929 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R3944:3944 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R3911:3913 Imp <> ::x_'/'_x_'\\'_x not
R3916:3919 Imp <> ::x_'/'_x_'\\'_x not
R3909:3910 Equiv <> c1 var
R3914:3915 Equiv <> st var
R3920:3922 Equiv <> st' var
R3932:3934 Imp <> ::x_'/'_x_'\\'_x not
R3937:3940 Imp <> ::x_'/'_x_'\\'_x not
R3930:3931 Equiv <> c2 var
R3935:3936 Equiv <> st var
R3941:3943 Equiv <> st' var
prf 4185:4193 <> skip_left
R4208:4213 Equiv <> cequiv def
R4236:4236 Equiv <> c var
R4225:4227 Imp <> ::x_';;'_x not
R4221:4224 Imp <> ::'SKIP' not
R4228:4228 Equiv <> c var
R4409:4413 Imp <> E_Seq constr
R4409:4413 Imp <> E_Seq constr
R4434:4439 Imp <> E_Skip constr
R4434:4439 Imp <> E_Skip constr
prf 4604:4613 <> skip_right
R4628:4633 Equiv <> cequiv def
R4655:4655 Equiv <> c var
R4641:4644 Imp <> ::x_';;'_x not
R4640:4640 Equiv <> c var
R4645:4648 Imp <> ::'SKIP' not
R4758:4762 Imp <> E_Seq constr
R4758:4762 Imp <> E_Seq constr
R4792:4797 Imp <> E_Skip constr
R4792:4797 Imp <> E_Skip constr
prf 4913:4927 <> IFB_true_simple
R4946:4951 Equiv <> cequiv def
R4992:4993 Equiv <> c1 var
R4958:4961 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R4967:4972 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R4975:4980 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R4983:4985 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R4962:4966 Imp <> BTrue constr
R4973:4974 Equiv <> c1 var
R4981:4982 Equiv <> c2 var
R5124:5131 Imp <> E_IfTrue constr
R5124:5131 Imp <> E_IfTrue constr
prf 7046:7053 <> IFB_true
R7091:7100 Coq.Init.Logic <> :type_scope:x_'->'_x not
R7101:7106 Equiv <> cequiv def
R7149:7150 Equiv <> c1 var
R7116:7119 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R7121:7126 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R7129:7134 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R7137:7139 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R7120:7120 Equiv <> b var
R7127:7128 Equiv <> c1 var
R7135:7136 Equiv <> c2 var
R7077:7082 Equiv <> bequiv def
R7086:7090 Imp <> BTrue constr
R7084:7084 Equiv <> b var
R7349:7354 Equiv <> bequiv def
R7443:7450 Imp <> E_IfTrue constr
R7443:7450 Imp <> E_IfTrue constr
R7480:7485 Equiv <> bequiv def
prf 7607:7615 <> IFB_false
R7651:7657 Coq.Init.Logic <> :type_scope:x_'->'_x not
R7658:7663 Equiv <> cequiv def
R7700:7701 Equiv <> c2 var
R7670:7673 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R7675:7680 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R7683:7688 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R7691:7693 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R7674:7674 Equiv <> b var
R7681:7682 Equiv <> c1 var
R7689:7690 Equiv <> c2 var
R7636:7641 Equiv <> bequiv def
R7645:7650 Imp <> BFalse constr
R7643:7643 Equiv <> b var
R7758:7763 Equiv <> bequiv def
R7836:7844 Imp <> E_IfFalse constr
R7836:7844 Imp <> E_IfFalse constr
R7854:7859 Equiv <> bequiv def
prf 8064:8079 <> swap_if_branches
R8100:8105 Equiv <> cequiv def
R8143:8146 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R8153:8158 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R8161:8166 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R8169:8171 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R8147:8150 Imp <> BNot constr
R8152:8152 Equiv <> b var
R8159:8160 Equiv <> e2 var
R8167:8168 Equiv <> e1 var
R8112:8115 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R8117:8122 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R8125:8130 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R8133:8135 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R8116:8116 Equiv <> b var
R8123:8124 Equiv <> e1 var
R8131:8132 Equiv <> e2 var
R8249:8257 Imp <> E_IfFalse constr
R8267:8274 Imp <> E_IfTrue constr
R8249:8257 Imp <> E_IfFalse constr
R8267:8274 Imp <> E_IfTrue constr
R8413:8421 Imp <> E_IfFalse constr
R8431:8438 Imp <> E_IfTrue constr
R8474:8477 Coq.Init.Datatypes <> negb def
R8457:8463 Coq.Init.Logic <> f_equal thm
R8510:8524 Coq.Bool.Bool <> negb_involutive thm
R8413:8421 Imp <> E_IfFalse constr
R8431:8438 Imp <> E_IfTrue constr
R8474:8477 Coq.Init.Datatypes <> negb def
R8457:8463 Coq.Init.Logic <> f_equal thm
R8474:8477 Coq.Init.Datatypes <> negb def
R8457:8463 Coq.Init.Logic <> f_equal thm
R8474:8477 Coq.Init.Datatypes <> negb def
R8457:8463 Coq.Init.Logic <> f_equal thm
R8474:8477 Coq.Init.Datatypes <> negb def
R8457:8463 Coq.Init.Logic <> f_equal thm
R8510:8524 Coq.Bool.Bool <> negb_involutive thm
R8510:8524 Coq.Bool.Bool <> negb_involutive thm
R8510:8524 Coq.Bool.Bool <> negb_involutive thm
R8510:8524 Coq.Bool.Bool <> negb_involutive thm
R8510:8524 Coq.Bool.Bool <> negb_involutive thm
R8510:8524 Coq.Bool.Bool <> negb_involutive thm
R8510:8524 Coq.Bool.Bool <> negb_involutive thm
R8510:8524 Coq.Bool.Bool <> negb_involutive thm
prf 8902:8912 <> WHILE_false
R8945:8950 Coq.Init.Logic <> :type_scope:x_'->'_x not
R8951:8956 Equiv <> cequiv def
R8985:8988 Imp <> ::'SKIP' not
R8963:8968 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R8970:8973 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R8975:8978 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R8969:8969 Equiv <> b var
R8974:8974 Equiv <> c var
R8930:8935 Equiv <> bequiv def
R8939:8944 Imp <> BFalse constr
R8937:8937 Equiv <> b var
R9106:9111 Imp <> E_Skip constr
R9106:9111 Imp <> E_Skip constr
R9223:9234 Imp <> E_WhileFalse constr
R9223:9234 Imp <> E_WhileFalse constr
prf 10567:10584 <> WHILE_true_nonterm
R10623:10628 Coq.Init.Logic <> :type_scope:x_'->'_x not
R10629:10631 Coq.Init.Logic <> :type_scope:'~'_x not
R10662:10663 Coq.Init.Logic <> :type_scope:'~'_x not
R10632:10632 Imp <> ::x_'/'_x_'\\'_x not
R10649:10652 Imp <> ::x_'/'_x_'\\'_x not
R10655:10658 Imp <> ::x_'/'_x_'\\'_x not
R10633:10638 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R10640:10643 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R10645:10648 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R10639:10639 Equiv <> b var
R10644:10644 Equiv <> c var
R10653:10654 Equiv <> st var
R10659:10661 Equiv <> st' var
R10609:10614 Equiv <> bequiv def
R10618:10622 Imp <> BTrue constr
R10616:10616 Equiv <> b var
R10745:10750 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R10752:10755 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R10757:10760 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R10745:10750 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R10752:10755 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R10757:10760 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R11054:11059 Equiv <> bequiv def
prf 11589:11598 <> WHILE_true
R11629:11635 Coq.Init.Logic <> :type_scope:x_'->'_x not
R11636:11641 Equiv <> cequiv def
R11671:11676 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R11682:11685 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R11690:11693 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R11677:11681 Imp <> BTrue constr
R11686:11689 Imp <> ::'SKIP' not
R11648:11653 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R11655:11658 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R11660:11663 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R11654:11654 Equiv <> b var
R11659:11659 Equiv <> c var
R11615:11620 Equiv <> bequiv def
R11624:11628 Imp <> BTrue constr
R11622:11622 Equiv <> b var
R11729:11746 Equiv <> WHILE_true_nonterm thm
R11729:11746 Equiv <> WHILE_true_nonterm thm
R11819:11824 Equiv <> bequiv def
R11832:11836 Imp <> BTrue constr
R11826:11830 Imp <> BTrue constr
R11819:11824 Equiv <> bequiv def
R11832:11836 Imp <> BTrue constr
R11826:11830 Imp <> BTrue constr
R11849:11854 Equiv <> bequiv def
R11916:11919 Imp <> ::'SKIP' not
R11886:11903 Equiv <> WHILE_true_nonterm thm
R11916:11919 Imp <> ::'SKIP' not
R11886:11903 Equiv <> WHILE_true_nonterm thm
prf 12206:12219 <> loop_unrolling
R12236:12241 Equiv <> cequiv def
R12271:12274 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R12276:12282 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R12304:12310 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R12315:12317 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R12275:12275 Equiv <> b var
R12284:12287 Imp <> ::x_';;'_x not
R12283:12283 Equiv <> c var
R12288:12293 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12295:12298 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12300:12303 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12294:12294 Equiv <> b var
R12299:12299 Equiv <> c var
R12311:12314 Imp <> ::'SKIP' not
R12248:12253 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12255:12258 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12260:12263 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12254:12254 Equiv <> b var
R12259:12259 Equiv <> c var
R12474:12482 Imp <> E_IfFalse constr
R12474:12482 Imp <> E_IfFalse constr
R12503:12508 Imp <> E_Skip constr
R12503:12508 Imp <> E_Skip constr
R12545:12552 Imp <> E_IfTrue constr
R12545:12552 Imp <> E_IfTrue constr
R12579:12583 Imp <> E_Seq constr
R12579:12583 Imp <> E_Seq constr
R12729:12739 Imp <> E_WhileTrue constr
R12729:12739 Imp <> E_WhileTrue constr
R12865:12876 Imp <> E_WhileFalse constr
R12865:12876 Imp <> E_WhileFalse constr
prf 12959:12967 <> seq_assoc
R12990:12995 Equiv <> cequiv def
R13015:13017 Imp <> ::x_';;'_x not
R13024:13024 Imp <> ::x_';;'_x not
R13013:13014 Equiv <> c1 var
R13020:13021 Imp <> ::x_';;'_x not
R13018:13019 Equiv <> c2 var
R13022:13023 Equiv <> c3 var
R12998:12998 Imp <> ::x_';;'_x not
R13005:13007 Imp <> ::x_';;'_x not
R13001:13002 Imp <> ::x_';;'_x not
R12999:13000 Equiv <> c1 var
R13003:13004 Equiv <> c2 var
R13008:13009 Equiv <> c3 var
R13124:13128 Imp <> E_Seq constr
R13124:13128 Imp <> E_Seq constr
R13170:13174 Imp <> E_Seq constr
R13170:13174 Imp <> E_Seq constr
R13292:13296 Imp <> E_Seq constr
R13292:13296 Imp <> E_Seq constr
R13326:13330 Imp <> E_Seq constr
R13326:13330 Imp <> E_Seq constr
prf 13552:13570 <> identity_assignment
R13584:13585 Maps <> id ind
R13591:13596 Equiv <> cequiv def
R13620:13623 Imp <> ::'SKIP' not
R13604:13608 Imp <> ::x_'::='_x not
R13603:13603 Equiv <> X var
R13609:13611 Imp <> AId constr
R13613:13613 Equiv <> X var
R13726:13733 Maps <> t_update def
R13726:13733 Maps <> t_update def
R13794:13818 Coq.Logic.FunctionalExtensionality <> functional_extensionality thm
R13794:13818 Coq.Logic.FunctionalExtensionality <> functional_extensionality thm
R13845:13857 Maps <> t_update_same prfax
R13845:13857 Maps <> t_update_same prfax
R13845:13857 Maps <> t_update_same prfax
R13914:13921 Maps <> t_update def
R13930:13934 Imp <> aeval def
R13941:13943 Imp <> AId constr
R13914:13921 Maps <> t_update def
R13930:13934 Imp <> aeval def
R13941:13943 Imp <> AId constr
R13986:13990 Imp <> E_Ass constr
R13986:13990 Imp <> E_Ass constr
R14021:14045 Coq.Logic.FunctionalExtensionality <> functional_extensionality thm
R14021:14045 Coq.Logic.FunctionalExtensionality <> functional_extensionality thm
R14072:14084 Maps <> t_update_same prfax
R14072:14084 Maps <> t_update_same prfax
R14072:14084 Maps <> t_update_same prfax
prf 14174:14186 <> assign_aequiv
R14220:14225 Coq.Init.Logic <> :type_scope:x_'->'_x not
R14226:14231 Equiv <> cequiv def
R14240:14244 Imp <> ::x_'::='_x not
R14239:14239 Equiv <> X var
R14245:14245 Equiv <> e var
R14233:14236 Imp <> ::'SKIP' not
R14204:14209 Equiv <> aequiv def
R14219:14219 Equiv <> e var
R14212:14214 Imp <> AId constr
R14216:14216 Equiv <> X var
R14264:14269 Equiv <> aequiv def
R14316:14319 Coq.Init.Logic <> :type_scope:x_'='_x not
R14348:14348 Coq.Init.Logic <> :type_scope:x_'='_x not
R14320:14327 Maps <> t_update def
R14336:14340 Imp <> aeval def
R14316:14319 Coq.Init.Logic <> :type_scope:x_'='_x not
R14348:14348 Coq.Init.Logic <> :type_scope:x_'='_x not
R14320:14327 Maps <> t_update def
R14336:14340 Imp <> aeval def
R14360:14384 Coq.Logic.FunctionalExtensionality <> functional_extensionality thm
R14360:14384 Coq.Logic.FunctionalExtensionality <> functional_extensionality thm
R14419:14431 Maps <> t_update_same prfax
R14419:14431 Maps <> t_update_same prfax
R14419:14431 Maps <> t_update_same prfax
R14472:14476 Imp <> E_Ass constr
R14472:14476 Imp <> E_Ass constr
R14540:14547 Maps <> t_update def
R14555:14559 Imp <> aeval def
R14565:14567 Imp <> AId constr
R14540:14547 Maps <> t_update def
R14555:14559 Imp <> aeval def
R14565:14567 Imp <> AId constr
R14591:14596 Imp <> E_Skip constr
R14591:14596 Imp <> E_Skip constr
R14605:14629 Coq.Logic.FunctionalExtensionality <> functional_extensionality thm
R14605:14629 Coq.Logic.FunctionalExtensionality <> functional_extensionality thm
R14650:14662 Maps <> t_update_same prfax
R14650:14662 Maps <> t_update_same prfax
R14650:14662 Maps <> t_update_same prfax
def 15269:15274 <> prog_a
R15278:15280 Imp <> com ind
R15287:15292 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R15320:15327 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R15356:15361 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R15293:15296 Imp <> BNot constr
R15299:15301 Imp <> BLe constr
R15312:15315 Imp <> ANum constr
R15304:15306 Imp <> AId constr
R15308:15308 Imp <> X def
R15329:15333 Imp <> ::x_'::='_x not
R15328:15328 Imp <> X def
R15334:15338 Imp <> APlus constr
R15349:15352 Imp <> ANum constr
R15341:15343 Imp <> AId constr
R15345:15345 Imp <> X def
def 15376:15381 <> prog_b
R15385:15387 Imp <> com ind
R15504:15508 Imp <> ::x_';;'_x not
R15394:15397 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R15418:15427 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R15475:15486 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R15499:15503 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R15398:15400 Imp <> BEq constr
R15411:15414 Imp <> ANum constr
R15403:15405 Imp <> AId constr
R15407:15407 Imp <> X def
R15456:15462 Imp <> ::x_';;'_x not
R15429:15433 Imp <> ::x_'::='_x not
R15428:15428 Imp <> X def
R15434:15438 Imp <> APlus constr
R15449:15452 Imp <> ANum constr
R15441:15443 Imp <> AId constr
R15445:15445 Imp <> X def
R15464:15468 Imp <> ::x_'::='_x not
R15463:15463 Imp <> Y def
R15469:15472 Imp <> ANum constr
R15488:15492 Imp <> ::x_'::='_x not
R15487:15487 Imp <> Y def
R15493:15496 Imp <> ANum constr
R15537:15541 Imp <> ::x_';;'_x not
R15510:15514 Imp <> ::x_'::='_x not
R15509:15509 Imp <> X def
R15515:15520 Imp <> AMinus constr
R15531:15533 Imp <> AId constr
R15535:15535 Imp <> Y def
R15523:15525 Imp <> AId constr
R15527:15527 Imp <> X def
R15543:15547 Imp <> ::x_'::='_x not
R15542:15542 Imp <> Y def
R15548:15551 Imp <> ANum constr
def 15568:15573 <> prog_c
R15577:15579 Imp <> com ind
R15586:15589 Imp <> ::'SKIP' not
def 15604:15609 <> prog_d
R15613:15615 Imp <> com ind
R15622:15627 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R15655:15662 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R15707:15712 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R15628:15631 Imp <> BNot constr
R15634:15636 Imp <> BEq constr
R15647:15650 Imp <> ANum constr
R15639:15641 Imp <> AId constr
R15643:15643 Imp <> X def
R15664:15668 Imp <> ::x_'::='_x not
R15663:15663 Imp <> X def
R15669:15673 Imp <> APlus constr
R15700:15703 Imp <> ANum constr
R15676:15680 Imp <> AMult constr
R15691:15693 Imp <> AId constr
R15695:15695 Imp <> Y def
R15683:15685 Imp <> AId constr
R15687:15687 Imp <> X def
def 15727:15732 <> prog_e
R15736:15738 Imp <> com ind
R15746:15750 Imp <> ::x_'::='_x not
R15745:15745 Imp <> Y def
R15751:15754 Imp <> ANum constr
def 15771:15776 <> prog_f
R15780:15782 Imp <> com ind
R15817:15821 Imp <> ::x_';;'_x not
R15790:15794 Imp <> ::x_'::='_x not
R15789:15789 Imp <> Y def
R15795:15799 Imp <> APlus constr
R15810:15813 Imp <> ANum constr
R15802:15804 Imp <> AId constr
R15806:15806 Imp <> X def
R15822:15827 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R15854:15861 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R15890:15895 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R15828:15831 Imp <> BNot constr
R15834:15836 Imp <> BEq constr
R15847:15849 Imp <> AId constr
R15851:15851 Imp <> Y def
R15839:15841 Imp <> AId constr
R15843:15843 Imp <> X def
R15863:15867 Imp <> ::x_'::='_x not
R15862:15862 Imp <> Y def
R15868:15872 Imp <> APlus constr
R15883:15886 Imp <> ANum constr
R15875:15877 Imp <> AId constr
R15879:15879 Imp <> X def
def 15910:15915 <> prog_g
R15919:15921 Imp <> com ind
R15928:15933 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R15939:15946 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R15951:15956 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R15934:15938 Imp <> BTrue constr
R15947:15950 Imp <> ::'SKIP' not
def 15971:15976 <> prog_h
R15980:15982 Imp <> com ind
R15989:15994 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R16021:16028 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R16057:16062 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R15995:15998 Imp <> BNot constr
R16001:16003 Imp <> BEq constr
R16014:16016 Imp <> AId constr
R16018:16018 Imp <> X def
R16006:16008 Imp <> AId constr
R16010:16010 Imp <> X def
R16030:16034 Imp <> ::x_'::='_x not
R16029:16029 Imp <> X def
R16035:16039 Imp <> APlus constr
R16050:16053 Imp <> ANum constr
R16042:16044 Imp <> AId constr
R16046:16046 Imp <> X def
def 16077:16082 <> prog_i
R16086:16088 Imp <> com ind
R16095:16100 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R16127:16134 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R16163:16168 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R16101:16104 Imp <> BNot constr
R16107:16109 Imp <> BEq constr
R16120:16122 Imp <> AId constr
R16124:16124 Imp <> Y def
R16112:16114 Imp <> AId constr
R16116:16116 Imp <> X def
R16136:16140 Imp <> ::x_'::='_x not
R16135:16135 Imp <> X def
R16141:16145 Imp <> APlus constr
R16156:16159 Imp <> ANum constr
R16148:16150 Imp <> AId constr
R16152:16152 Imp <> Y def
def 16183:16195 <> equiv_classes
R16199:16202 Coq.Init.Datatypes <> list ind
R16205:16208 Coq.Init.Datatypes <> list ind
R16210:16212 Imp <> com ind
R16221:16221 Coq.Lists.List ListNotations :list_scope:'['_x_';'_x_';'_'..'_';'_x_']' not
R16238:16239 Coq.Lists.List ListNotations :list_scope:'['_x_';'_x_';'_'..'_';'_x_']' not
R16256:16257 Coq.Lists.List ListNotations :list_scope:'['_x_';'_x_';'_'..'_';'_x_']' not
R16274:16275 Coq.Lists.List ListNotations :list_scope:'['_x_';'_x_';'_'..'_';'_x_']' not
R16292:16293 Coq.Lists.List ListNotations :list_scope:'['_x_';'_x_';'_'..'_';'_x_']' not
R16302:16302 Coq.Lists.List ListNotations :list_scope:'['_x_';'_x_';'_'..'_';'_x_']' not
R16222:16222 Coq.Lists.List ListNotations :list_scope:'['_x_';'_x_';'_'..'_';'_x_']' not
R16229:16230 Coq.Lists.List ListNotations :list_scope:'['_x_';'_x_';'_'..'_';'_x_']' not
R16237:16237 Coq.Lists.List ListNotations :list_scope:'['_x_';'_x_';'_'..'_';'_x_']' not
R16223:16228 Equiv <> prog_a def
R16231:16236 Equiv <> prog_d def
R16294:16294 Coq.Lists.List ListNotations :list_scope:'['_x_']' not
R16301:16301 Coq.Lists.List ListNotations :list_scope:'['_x_']' not
R16295:16300 Equiv <> prog_i def
R16276:16276 Coq.Lists.List ListNotations :list_scope:'['_x_';'_x_';'_'..'_';'_x_']' not
R16283:16284 Coq.Lists.List ListNotations :list_scope:'['_x_';'_x_';'_'..'_';'_x_']' not
R16291:16291 Coq.Lists.List ListNotations :list_scope:'['_x_';'_x_';'_'..'_';'_x_']' not
R16277:16282 Equiv <> prog_f def
R16285:16290 Equiv <> prog_g def
R16258:16258 Coq.Lists.List ListNotations :list_scope:'['_x_';'_x_';'_'..'_';'_x_']' not
R16265:16266 Coq.Lists.List ListNotations :list_scope:'['_x_';'_x_';'_'..'_';'_x_']' not
R16273:16273 Coq.Lists.List ListNotations :list_scope:'['_x_';'_x_';'_'..'_';'_x_']' not
R16259:16264 Equiv <> prog_c def
R16267:16272 Equiv <> prog_h def
R16240:16240 Coq.Lists.List ListNotations :list_scope:'['_x_';'_x_';'_'..'_';'_x_']' not
R16247:16248 Coq.Lists.List ListNotations :list_scope:'['_x_';'_x_';'_'..'_';'_x_']' not
R16255:16255 Coq.Lists.List ListNotations :list_scope:'['_x_';'_x_';'_'..'_';'_x_']' not
R16241:16246 Equiv <> prog_b def
R16249:16254 Equiv <> prog_e def
prf 16860:16870 <> refl_aequiv
R16886:16889 Imp <> aexp ind
R16893:16898 Equiv <> aequiv def
R16902:16902 Equiv <> a var
R16900:16900 Equiv <> a var
prf 16953:16962 <> sym_aequiv
R16982:16985 Imp <> aexp ind
R17003:17006 Coq.Init.Logic <> :type_scope:x_'->'_x not
R17007:17012 Equiv <> aequiv def
R17017:17018 Equiv <> a1 var
R17014:17015 Equiv <> a2 var
R16991:16996 Equiv <> aequiv def
R17001:17002 Equiv <> a2 var
R16998:16999 Equiv <> a1 var
prf 17089:17100 <> trans_aequiv
R17123:17126 Imp <> aexp ind
R17144:17147 Coq.Init.Logic <> :type_scope:x_'->'_x not
R17160:17163 Coq.Init.Logic <> :type_scope:x_'->'_x not
R17164:17169 Equiv <> aequiv def
R17174:17175 Equiv <> a3 var
R17171:17172 Equiv <> a1 var
R17148:17153 Equiv <> aequiv def
R17158:17159 Equiv <> a3 var
R17155:17156 Equiv <> a2 var
R17132:17137 Equiv <> aequiv def
R17142:17143 Equiv <> a2 var
R17139:17140 Equiv <> a1 var
R17194:17199 Equiv <> aequiv def
prf 17294:17304 <> refl_bequiv
R17320:17323 Imp <> bexp ind
R17327:17332 Equiv <> bequiv def
R17336:17336 Equiv <> b var
R17334:17334 Equiv <> b var
R17355:17360 Equiv <> bequiv def
prf 17402:17411 <> sym_bequiv
R17431:17434 Imp <> bexp ind
R17452:17455 Coq.Init.Logic <> :type_scope:x_'->'_x not
R17456:17461 Equiv <> bequiv def
R17466:17467 Equiv <> b1 var
R17463:17464 Equiv <> b2 var
R17440:17445 Equiv <> bequiv def
R17450:17451 Equiv <> b2 var
R17447:17448 Equiv <> b1 var
R17486:17491 Equiv <> bequiv def
prf 17553:17564 <> trans_bequiv
R17587:17590 Imp <> bexp ind
R17608:17611 Coq.Init.Logic <> :type_scope:x_'->'_x not
R17624:17627 Coq.Init.Logic <> :type_scope:x_'->'_x not
R17628:17633 Equiv <> bequiv def
R17638:17639 Equiv <> b3 var
R17635:17636 Equiv <> b1 var
R17612:17617 Equiv <> bequiv def
R17622:17623 Equiv <> b3 var
R17619:17620 Equiv <> b2 var
R17596:17601 Equiv <> bequiv def
R17606:17607 Equiv <> b2 var
R17603:17604 Equiv <> b1 var
R17658:17663 Equiv <> bequiv def
prf 17758:17768 <> refl_cequiv
R17784:17786 Imp <> com ind
R17790:17795 Equiv <> cequiv def
R17799:17799 Equiv <> c var
R17797:17797 Equiv <> c var
R17818:17823 Equiv <> cequiv def
R17849:17856 Coq.Init.Logic <> iff_refl thm
R17849:17856 Coq.Init.Logic <> iff_refl thm
prf 17872:17881 <> sym_cequiv
R17901:17903 Imp <> com ind
R17921:17924 Coq.Init.Logic <> :type_scope:x_'->'_x not
R17925:17930 Equiv <> cequiv def
R17935:17936 Equiv <> c1 var
R17932:17933 Equiv <> c2 var
R17909:17914 Equiv <> cequiv def
R17919:17920 Equiv <> c2 var
R17916:17917 Equiv <> c1 var
R17955:17960 Equiv <> cequiv def
R18010:18014 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R17998:18000 Imp <> ::x_'/'_x_'\\'_x not
R18003:18006 Imp <> ::x_'/'_x_'\\'_x not
R18017:18019 Imp <> ::x_'/'_x_'\\'_x not
R18022:18025 Imp <> ::x_'/'_x_'\\'_x not
R18010:18014 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R17998:18000 Imp <> ::x_'/'_x_'\\'_x not
R18003:18006 Imp <> ::x_'/'_x_'\\'_x not
R18017:18019 Imp <> ::x_'/'_x_'\\'_x not
R18022:18025 Imp <> ::x_'/'_x_'\\'_x not
R18086:18092 Coq.Init.Logic <> iff_sym thm
R18086:18092 Coq.Init.Logic <> iff_sym thm
prf 18119:18127 <> iff_trans
R18159:18159 Coq.Init.Logic <> :type_scope:x_'->'_x not
R18169:18173 Coq.Init.Logic <> :type_scope:x_'->'_x not
R18174:18174 Coq.Init.Logic <> :type_scope:x_'->'_x not
R18184:18189 Coq.Init.Logic <> :type_scope:x_'->'_x not
R18199:18199 Coq.Init.Logic <> :type_scope:x_'->'_x not
R18192:18196 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R18190:18191 Equiv <> P1 var
R18197:18198 Equiv <> P3 var
R18177:18181 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R18175:18176 Equiv <> P2 var
R18182:18183 Equiv <> P3 var
R18162:18166 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R18160:18161 Equiv <> P1 var
R18167:18168 Equiv <> P2 var
prf 18365:18376 <> trans_cequiv
R18399:18401 Imp <> com ind
R18419:18422 Coq.Init.Logic <> :type_scope:x_'->'_x not
R18435:18438 Coq.Init.Logic <> :type_scope:x_'->'_x not
R18439:18444 Equiv <> cequiv def
R18449:18450 Equiv <> c3 var
R18446:18447 Equiv <> c1 var
R18423:18428 Equiv <> cequiv def
R18433:18434 Equiv <> c3 var
R18430:18431 Equiv <> c2 var
R18407:18412 Equiv <> cequiv def
R18417:18418 Equiv <> c2 var
R18414:18415 Equiv <> c1 var
R18469:18474 Equiv <> cequiv def
R18535:18537 Imp <> ::x_'/'_x_'\\'_x not
R18540:18543 Imp <> ::x_'/'_x_'\\'_x not
R18517:18525 Equiv <> iff_trans thm
R18535:18537 Imp <> ::x_'/'_x_'\\'_x not
R18540:18543 Imp <> ::x_'/'_x_'\\'_x not
R18517:18525 Equiv <> iff_trans thm
prf 19940:19954 <> CAss_congruence
R19990:19995 Coq.Init.Logic <> :type_scope:x_'->'_x not
R19996:20001 Equiv <> cequiv def
R20016:20019 Imp <> CAss constr
R20023:20025 Equiv <> a1' var
R20021:20021 Equiv <> i var
R20004:20007 Imp <> CAss constr
R20011:20012 Equiv <> a1 var
R20009:20009 Equiv <> i var
R19977:19982 Equiv <> aequiv def
R19987:19989 Equiv <> a1' var
R19984:19985 Equiv <> a1 var
R20138:20142 Imp <> E_Ass constr
R20138:20142 Imp <> E_Ass constr
R20224:20228 Imp <> E_Ass constr
R20224:20228 Imp <> E_Ass constr
prf 22086:22102 <> CWhile_congruence
R22143:22146 Coq.Init.Logic <> :type_scope:x_'->'_x not
R22160:22165 Coq.Init.Logic <> :type_scope:x_'->'_x not
R22166:22171 Equiv <> cequiv def
R22195:22200 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R22204:22207 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R22211:22214 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R22201:22203 Equiv <> b1' var
R22208:22210 Equiv <> c1' var
R22174:22179 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R22182:22185 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R22188:22191 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R22180:22181 Equiv <> b1 var
R22186:22187 Equiv <> c1 var
R22147:22152 Equiv <> cequiv def
R22157:22159 Equiv <> c1' var
R22154:22155 Equiv <> c1 var
R22130:22135 Equiv <> bequiv def
R22140:22142 Equiv <> b1' var
R22137:22138 Equiv <> b1 var
R22258:22263 Equiv <> bequiv def
R22265:22270 Equiv <> cequiv def
R22362:22367 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R22370:22373 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R22376:22379 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R22362:22367 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R22370:22373 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R22376:22379 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R22497:22508 Imp <> E_WhileFalse constr
R22497:22508 Imp <> E_WhileFalse constr
R22573:22583 Imp <> E_WhileTrue constr
R22573:22583 Imp <> E_WhileTrue constr
R22832:22837 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R22841:22844 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R22848:22851 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R22832:22837 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R22841:22844 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R22848:22851 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R22972:22983 Imp <> E_WhileFalse constr
R22972:22983 Imp <> E_WhileFalse constr
R23048:23058 Imp <> E_WhileTrue constr
R23048:23058 Imp <> E_WhileTrue constr
prf 23354:23368 <> CSeq_congruence
R23409:23412 Coq.Init.Logic <> :type_scope:x_'->'_x not
R23426:23431 Coq.Init.Logic <> :type_scope:x_'->'_x not
R23432:23437 Equiv <> cequiv def
R23452:23453 Imp <> ::x_';;'_x not
R23449:23451 Equiv <> c1' var
R23454:23456 Equiv <> c2' var
R23442:23443 Imp <> ::x_';;'_x not
R23440:23441 Equiv <> c1 var
R23444:23445 Equiv <> c2 var
R23413:23418 Equiv <> cequiv def
R23423:23425 Equiv <> c2' var
R23420:23421 Equiv <> c2 var
R23396:23401 Equiv <> cequiv def
R23406:23408 Equiv <> c1' var
R23403:23404 Equiv <> c1 var
R23513:23517 Imp <> E_Seq constr
R23513:23517 Imp <> E_Seq constr
R23613:23617 Imp <> E_Seq constr
R23613:23617 Imp <> E_Seq constr
prf 23756:23769 <> CIf_congruence
R23813:23816 Coq.Init.Logic <> :type_scope:x_'->'_x not
R23830:23833 Coq.Init.Logic <> :type_scope:x_'->'_x not
R23847:23852 Coq.Init.Logic <> :type_scope:x_'->'_x not
R23853:23858 Equiv <> cequiv def
R23897:23900 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R23903:23908 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R23912:23917 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R23921:23923 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R23901:23902 Equiv <> b' var
R23909:23911 Equiv <> c1' var
R23918:23920 Equiv <> c2' var
R23861:23864 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R23866:23871 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R23874:23879 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R23882:23884 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R23865:23865 Equiv <> b var
R23872:23873 Equiv <> c1 var
R23880:23881 Equiv <> c2 var
R23834:23839 Equiv <> cequiv def
R23844:23846 Equiv <> c2' var
R23841:23842 Equiv <> c2 var
R23817:23822 Equiv <> cequiv def
R23827:23829 Equiv <> c1' var
R23824:23825 Equiv <> c1 var
R23802:23807 Equiv <> bequiv def
R23811:23812 Equiv <> b' var
R23809:23809 Equiv <> b var
R23981:23988 Imp <> E_IfTrue constr
R23981:23988 Imp <> E_IfTrue constr
R24047:24055 Imp <> E_IfFalse constr
R24047:24055 Imp <> E_IfFalse constr
R24137:24144 Imp <> E_IfTrue constr
R24137:24144 Imp <> E_IfTrue constr
R24200:24208 Imp <> E_IfFalse constr
R24200:24208 Imp <> E_IfFalse constr
def 24376:24393 <> congruence_example
R24398:24403 Equiv <> cequiv def
R24586:24593 Imp <> ::x_';;'_x not
R24575:24579 Imp <> ::x_'::='_x not
R24574:24574 Imp <> X def
R24580:24583 Imp <> ANum constr
R24594:24598 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R24619:24637 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R24666:24709 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R24723:24730 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R24599:24601 Imp <> BEq constr
R24612:24615 Imp <> ANum constr
R24604:24606 Imp <> AId constr
R24608:24608 Imp <> X def
R24639:24643 Imp <> ::x_'::='_x not
R24638:24638 Imp <> Y def
R24644:24649 Imp <> AMinus constr
R24660:24662 Imp <> AId constr
R24664:24664 Imp <> X def
R24652:24654 Imp <> AId constr
R24656:24656 Imp <> X def
R24711:24715 Imp <> ::x_'::='_x not
R24710:24710 Imp <> Y def
R24716:24719 Imp <> ANum constr
R24443:24450 Imp <> ::x_';;'_x not
R24432:24436 Imp <> ::x_'::='_x not
R24431:24431 Imp <> X def
R24437:24440 Imp <> ANum constr
R24451:24455 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R24476:24494 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R24507:24524 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R24538:24545 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R24456:24458 Imp <> BEq constr
R24469:24472 Imp <> ANum constr
R24461:24463 Imp <> AId constr
R24465:24465 Imp <> X def
R24496:24500 Imp <> ::x_'::='_x not
R24495:24495 Imp <> Y def
R24501:24504 Imp <> ANum constr
R24526:24530 Imp <> ::x_'::='_x not
R24525:24525 Imp <> Y def
R24531:24534 Imp <> ANum constr
R24749:24763 Equiv <> CSeq_congruence thm
R24749:24763 Equiv <> CSeq_congruence thm
R24776:24786 Equiv <> refl_cequiv thm
R24776:24786 Equiv <> refl_cequiv thm
R24799:24812 Equiv <> CIf_congruence thm
R24799:24812 Equiv <> CIf_congruence thm
R24827:24837 Equiv <> refl_bequiv thm
R24827:24837 Equiv <> refl_bequiv thm
R24852:24866 Equiv <> CAss_congruence thm
R24852:24866 Equiv <> CAss_congruence thm
R24876:24881 Equiv <> aequiv def
R24915:24924 Coq.Arith.Minus <> minus_diag syndef
R24915:24924 Coq.Arith.Minus <> minus_diag syndef
R24939:24949 Equiv <> refl_cequiv thm
R24939:24949 Equiv <> refl_cequiv thm
def 25709:25720 <> atrans_sound
R25736:25739 Coq.Init.Logic <> :type_scope:x_'->'_x not
R25740:25743 Imp <> aexp ind
R25732:25735 Imp <> aexp ind
R25770:25773 Imp <> aexp ind
R25781:25786 Equiv <> aequiv def
R25791:25796 Equiv <> atrans var
R25798:25798 Equiv <> a var
R25788:25788 Equiv <> a var
def 25814:25825 <> btrans_sound
R25841:25844 Coq.Init.Logic <> :type_scope:x_'->'_x not
R25845:25848 Imp <> bexp ind
R25837:25840 Imp <> bexp ind
R25875:25878 Imp <> bexp ind
R25886:25891 Equiv <> bequiv def
R25896:25901 Equiv <> btrans var
R25903:25903 Equiv <> b var
R25893:25893 Equiv <> b var
def 25919:25930 <> ctrans_sound
R25945:25948 Coq.Init.Logic <> :type_scope:x_'->'_x not
R25949:25951 Imp <> com ind
R25942:25944 Imp <> com ind
R25978:25980 Imp <> com ind
R25988:25993 Equiv <> cequiv def
R25998:26003 Equiv <> ctrans var
R26005:26005 Equiv <> c var
R25995:25995 Equiv <> c var
def 26331:26349 <> fold_constants_aexp
R26356:26359 Imp <> aexp ind
R26364:26367 Imp <> aexp ind
R26380:26380 Equiv <> a var
R26391:26394 Imp <> ANum constr
R26407:26410 Imp <> ANum constr
R26418:26420 Imp <> AId constr
R26434:26436 Imp <> AId constr
R26444:26448 Imp <> APlus constr
R26470:26470 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26493:26494 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26517:26517 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26471:26489 Equiv <> fold_constants_aexp def
R26495:26513 Equiv <> fold_constants_aexp def
R26534:26534 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26542:26543 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26551:26551 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26535:26538 Imp <> ANum constr
R26544:26547 Imp <> ANum constr
R26556:26559 Imp <> ANum constr
R26564:26566 Coq.Init.Peano <> :nat_scope:x_'+'_x not
R26577:26577 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26581:26582 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26586:26586 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26591:26595 Imp <> APlus constr
R26617:26622 Imp <> AMinus constr
R26643:26643 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26666:26667 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26690:26690 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26644:26662 Equiv <> fold_constants_aexp def
R26668:26686 Equiv <> fold_constants_aexp def
R26707:26707 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26715:26716 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26724:26724 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26708:26711 Imp <> ANum constr
R26717:26720 Imp <> ANum constr
R26729:26732 Imp <> ANum constr
R26737:26739 Coq.Init.Peano <> :nat_scope:x_'-'_x not
R26750:26750 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26754:26755 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26759:26759 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26764:26769 Imp <> AMinus constr
R26791:26795 Imp <> AMult constr
R26817:26817 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26840:26841 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26864:26864 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26818:26836 Equiv <> fold_constants_aexp def
R26842:26860 Equiv <> fold_constants_aexp def
R26881:26881 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26889:26890 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26898:26898 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26882:26885 Imp <> ANum constr
R26891:26894 Imp <> ANum constr
R26903:26906 Imp <> ANum constr
R26911:26913 Coq.Init.Peano <> :nat_scope:x_'*'_x not
R26924:26924 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26928:26929 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26933:26933 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26938:26942 Imp <> AMult constr
def 26976:26988 <> fold_aexp_ex1
R27063:27067 Coq.Init.Logic <> :type_scope:x_'='_x not
R26996:27014 Equiv <> fold_constants_aexp def
R27023:27027 Imp <> AMult constr
R27056:27058 Imp <> AId constr
R27060:27060 Imp <> X def
R27030:27034 Imp <> APlus constr
R27046:27049 Imp <> ANum constr
R27037:27040 Imp <> ANum constr
R27068:27072 Imp <> AMult constr
R27084:27086 Imp <> AId constr
R27088:27088 Imp <> X def
R27075:27078 Imp <> ANum constr
def 27431:27443 <> fold_aexp_ex2
R27564:27568 Coq.Init.Logic <> :type_scope:x_'='_x not
R27451:27469 Equiv <> fold_constants_aexp def
R27478:27483 Imp <> AMinus constr
R27494:27498 Imp <> APlus constr
R27556:27558 Imp <> AId constr
R27560:27560 Imp <> Y def
R27501:27505 Imp <> AMult constr
R27517:27520 Imp <> ANum constr
R27508:27511 Imp <> ANum constr
R27486:27488 Imp <> AId constr
R27490:27490 Imp <> X def
R27569:27574 Imp <> AMinus constr
R27585:27589 Imp <> APlus constr
R27601:27603 Imp <> AId constr
R27605:27605 Imp <> Y def
R27592:27595 Imp <> ANum constr
R27577:27579 Imp <> AId constr
R27581:27581 Imp <> X def
def 27827:27845 <> fold_constants_bexp
R27852:27855 Imp <> bexp ind
R27860:27863 Imp <> bexp ind
R27876:27876 Equiv <> b var
R27887:27891 Imp <> BTrue constr
R27903:27907 Imp <> BTrue constr
R27913:27918 Imp <> BFalse constr
R27929:27934 Imp <> BFalse constr
R27940:27942 Imp <> BEq constr
R27966:27966 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R27989:27990 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28013:28013 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R27967:27985 Equiv <> fold_constants_aexp def
R27991:28009 Equiv <> fold_constants_aexp def
R28028:28028 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28036:28037 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28045:28045 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28029:28032 Imp <> ANum constr
R28038:28041 Imp <> ANum constr
R28063:28069 Coq.Arith.EqNat <> beq_nat syndef
R28093:28098 Imp <> BFalse constr
R28082:28086 Imp <> BTrue constr
R28108:28108 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28112:28113 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28117:28117 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28132:28134 Imp <> BEq constr
R28158:28160 Imp <> BLe constr
R28184:28184 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28207:28208 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28231:28231 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28185:28203 Equiv <> fold_constants_aexp def
R28209:28227 Equiv <> fold_constants_aexp def
R28246:28246 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28254:28255 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28263:28263 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28247:28250 Imp <> ANum constr
R28256:28259 Imp <> ANum constr
R28281:28283 Coq.Arith.Compare_dec <> leb syndef
R28307:28312 Imp <> BFalse constr
R28296:28300 Imp <> BTrue constr
R28322:28322 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28326:28327 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28331:28331 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28346:28348 Imp <> BLe constr
R28372:28375 Imp <> BNot constr
R28397:28415 Equiv <> fold_constants_bexp def
R28434:28438 Imp <> BTrue constr
R28443:28448 Imp <> BFalse constr
R28458:28463 Imp <> BFalse constr
R28468:28472 Imp <> BTrue constr
R28489:28492 Imp <> BNot constr
R28512:28515 Imp <> BAnd constr
R28539:28539 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28562:28563 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28586:28586 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28540:28558 Equiv <> fold_constants_bexp def
R28564:28582 Equiv <> fold_constants_bexp def
R28601:28601 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28607:28608 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28614:28614 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28602:28606 Imp <> BTrue constr
R28609:28613 Imp <> BTrue constr
R28619:28623 Imp <> BTrue constr
R28633:28633 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28639:28640 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28647:28647 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28634:28638 Imp <> BTrue constr
R28641:28646 Imp <> BFalse constr
R28652:28657 Imp <> BFalse constr
R28667:28667 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28674:28675 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28681:28681 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28668:28673 Imp <> BFalse constr
R28676:28680 Imp <> BTrue constr
R28686:28691 Imp <> BFalse constr
R28701:28701 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28708:28709 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28716:28716 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28702:28707 Imp <> BFalse constr
R28710:28715 Imp <> BFalse constr
R28721:28726 Imp <> BFalse constr
R28736:28736 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28740:28741 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28745:28745 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28750:28753 Imp <> BAnd constr
def 28789:28801 <> fold_bexp_ex1
R28868:28872 Coq.Init.Logic <> :type_scope:x_'='_x not
R28809:28827 Equiv <> fold_constants_bexp def
R28830:28833 Imp <> BAnd constr
R28842:28845 Imp <> BNot constr
R28848:28851 Imp <> BAnd constr
R28860:28864 Imp <> BTrue constr
R28853:28858 Imp <> BFalse constr
R28835:28839 Imp <> BTrue constr
R28873:28877 Imp <> BTrue constr
def 28914:28926 <> fold_bexp_ex2
R29117:29121 Coq.Init.Logic <> :type_scope:x_'='_x not
R28934:28952 Equiv <> fold_constants_bexp def
R28961:28964 Imp <> BAnd constr
R29001:29003 Imp <> BEq constr
R29032:29037 Imp <> AMinus constr
R29049:29053 Imp <> APlus constr
R29106:29109 Imp <> ANum constr
R29056:29059 Imp <> ANum constr
R29040:29043 Imp <> ANum constr
R29006:29009 Imp <> ANum constr
R28967:28969 Imp <> BEq constr
R28980:28982 Imp <> AId constr
R28984:28984 Imp <> Y def
R28972:28974 Imp <> AId constr
R28976:28976 Imp <> X def
R29122:29125 Imp <> BAnd constr
R29149:29153 Imp <> BTrue constr
R29128:29130 Imp <> BEq constr
R29141:29143 Imp <> AId constr
R29145:29145 Imp <> Y def
R29133:29135 Imp <> AId constr
R29137:29137 Imp <> X def
def 29307:29324 <> fold_constants_com
R29331:29333 Imp <> com ind
R29338:29340 Imp <> com ind
R29353:29353 Equiv <> c var
R29364:29367 Imp <> ::'SKIP' not
R29383:29386 Imp <> ::'SKIP' not
R29393:29397 Imp <> ::x_'::='_x not
R29410:29413 Imp <> CAss constr
R29418:29436 Equiv <> fold_constants_aexp def
R29447:29450 Imp <> ::x_';;'_x not
R29464:29464 Imp <> ::x_';;'_x not
R29486:29491 Imp <> ::x_';;'_x not
R29513:29513 Imp <> ::x_';;'_x not
R29465:29482 Equiv <> fold_constants_com def
R29492:29509 Equiv <> fold_constants_com def
R29519:29522 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R29524:29529 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R29532:29537 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R29540:29542 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R29559:29577 Equiv <> fold_constants_bexp def
R29594:29598 Imp <> BTrue constr
R29603:29620 Equiv <> fold_constants_com def
R29633:29638 Imp <> BFalse constr
R29643:29660 Equiv <> fold_constants_com def
R29679:29682 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R29685:29690 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R29712:29738 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R29760:29762 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R29691:29708 Equiv <> fold_constants_com def
R29739:29756 Equiv <> fold_constants_com def
R29778:29783 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R29785:29788 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R29790:29793 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R29810:29828 Equiv <> fold_constants_bexp def
R29845:29849 Imp <> BTrue constr
R29854:29859 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R29865:29868 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R29873:29876 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R29860:29864 Imp <> BTrue constr
R29869:29872 Imp <> ::'SKIP' not
R29886:29891 Imp <> BFalse constr
R29896:29899 Imp <> ::'SKIP' not
R29915:29920 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R29923:29927 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R29948:29952 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R29928:29945 Equiv <> fold_constants_com def
R29947:29947 Equiv <> c var
def 29980:29991 <> fold_com_ex1
R30473:30512 Coq.Init.Logic <> :type_scope:x_'='_x not
R30770:30770 Coq.Init.Logic <> :type_scope:x_'='_x not
R29997:30014 Equiv <> fold_constants_com def
R30078:30085 Imp <> ::x_';;'_x not
R30050:30054 Imp <> ::x_'::='_x not
R30049:30049 Imp <> X def
R30055:30059 Imp <> APlus constr
R30071:30074 Imp <> ANum constr
R30062:30065 Imp <> ANum constr
R30115:30122 Imp <> ::x_';;'_x not
R30087:30091 Imp <> ::x_'::='_x not
R30086:30086 Imp <> Y def
R30092:30097 Imp <> AMinus constr
R30108:30111 Imp <> ANum constr
R30100:30102 Imp <> AId constr
R30104:30104 Imp <> X def
R30249:30256 Imp <> ::x_';;'_x not
R30123:30126 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R30194:30206 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R30211:30228 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R30241:30248 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R30127:30129 Imp <> BEq constr
R30170:30174 Imp <> APlus constr
R30186:30189 Imp <> ANum constr
R30177:30180 Imp <> ANum constr
R30132:30137 Imp <> AMinus constr
R30148:30150 Imp <> AId constr
R30152:30152 Imp <> Y def
R30140:30142 Imp <> AId constr
R30144:30144 Imp <> X def
R30207:30210 Imp <> ::'SKIP' not
R30230:30234 Imp <> ::x_'::='_x not
R30229:30229 Imp <> Y def
R30235:30238 Imp <> ANum constr
R30390:30397 Imp <> ::x_';;'_x not
R30257:30260 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R30330:30347 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R30360:30377 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R30382:30389 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R30261:30263 Imp <> BLe constr
R30288:30293 Imp <> AMinus constr
R30305:30309 Imp <> APlus constr
R30321:30324 Imp <> ANum constr
R30312:30315 Imp <> ANum constr
R30296:30299 Imp <> ANum constr
R30266:30269 Imp <> ANum constr
R30349:30353 Imp <> ::x_'::='_x not
R30348:30348 Imp <> Y def
R30354:30357 Imp <> ANum constr
R30378:30381 Imp <> ::'SKIP' not
R30398:30403 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R30424:30434 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R30463:30471 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R30404:30406 Imp <> BEq constr
R30417:30420 Imp <> ANum constr
R30409:30411 Imp <> AId constr
R30413:30413 Imp <> Y def
R30436:30440 Imp <> ::x_'::='_x not
R30435:30435 Imp <> X def
R30441:30445 Imp <> APlus constr
R30456:30459 Imp <> ANum constr
R30448:30450 Imp <> AId constr
R30452:30452 Imp <> X def
R30525:30532 Imp <> ::x_';;'_x not
R30514:30518 Imp <> ::x_'::='_x not
R30513:30513 Imp <> X def
R30519:30522 Imp <> ANum constr
R30562:30569 Imp <> ::x_';;'_x not
R30534:30538 Imp <> ::x_'::='_x not
R30533:30533 Imp <> Y def
R30539:30544 Imp <> AMinus constr
R30555:30558 Imp <> ANum constr
R30547:30549 Imp <> AId constr
R30551:30551 Imp <> X def
R30668:30675 Imp <> ::x_';;'_x not
R30570:30573 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R30611:30623 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R30628:30646 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R30659:30667 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R30574:30576 Imp <> BEq constr
R30604:30607 Imp <> ANum constr
R30579:30584 Imp <> AMinus constr
R30595:30597 Imp <> AId constr
R30599:30599 Imp <> Y def
R30587:30589 Imp <> AId constr
R30591:30591 Imp <> X def
R30624:30627 Imp <> ::'SKIP' not
R30648:30652 Imp <> ::x_'::='_x not
R30647:30647 Imp <> Y def
R30653:30656 Imp <> ANum constr
R30688:30695 Imp <> ::x_';;'_x not
R30677:30681 Imp <> ::x_'::='_x not
R30676:30676 Imp <> Y def
R30682:30685 Imp <> ANum constr
R30696:30701 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R30722:30732 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R30761:30769 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R30702:30704 Imp <> BEq constr
R30715:30718 Imp <> ANum constr
R30707:30709 Imp <> AId constr
R30711:30711 Imp <> Y def
R30734:30738 Imp <> ::x_'::='_x not
R30733:30733 Imp <> X def
R30739:30743 Imp <> APlus constr
R30754:30757 Imp <> ANum constr
R30746:30748 Imp <> AId constr
R30750:30750 Imp <> X def
prf 31034:31058 <> fold_constants_aexp_sound
R31064:31075 Equiv <> atrans_sound def
R31077:31095 Equiv <> fold_constants_aexp def
R31114:31125 Equiv <> atrans_sound def
R31145:31150 Equiv <> aequiv def
R31559:31577 Equiv <> fold_constants_aexp def
R31603:31621 Equiv <> fold_constants_aexp def
R31559:31577 Equiv <> fold_constants_aexp def
R31603:31621 Equiv <> fold_constants_aexp def
R31603:31621 Equiv <> fold_constants_aexp def
R31603:31621 Equiv <> fold_constants_aexp def
R31603:31621 Equiv <> fold_constants_aexp def
R31603:31621 Equiv <> fold_constants_aexp def
R31559:31577 Equiv <> fold_constants_aexp def
R31603:31621 Equiv <> fold_constants_aexp def
R31603:31621 Equiv <> fold_constants_aexp def
R31603:31621 Equiv <> fold_constants_aexp def
R31603:31621 Equiv <> fold_constants_aexp def
R31603:31621 Equiv <> fold_constants_aexp def
R31559:31577 Equiv <> fold_constants_aexp def
R31603:31621 Equiv <> fold_constants_aexp def
R31603:31621 Equiv <> fold_constants_aexp def
R31603:31621 Equiv <> fold_constants_aexp def
R31603:31621 Equiv <> fold_constants_aexp def
R31603:31621 Equiv <> fold_constants_aexp def
prf 34565:34589 <> fold_constants_bexp_sound
R34594:34605 Equiv <> btrans_sound def
R34607:34625 Equiv <> fold_constants_bexp def
R34644:34655 Equiv <> btrans_sound def
R34675:34680 Equiv <> bequiv def
R35159:35177 Equiv <> fold_constants_aexp def
R35159:35177 Equiv <> fold_constants_aexp def
R35216:35234 Equiv <> fold_constants_aexp def
R35216:35234 Equiv <> fold_constants_aexp def
R35272:35276 Imp <> aeval def
R35291:35295 Imp <> aeval def
R35338:35362 Equiv <> fold_constants_aexp_sound thm
R35272:35276 Imp <> aeval def
R35291:35295 Imp <> aeval def
R35338:35362 Equiv <> fold_constants_aexp_sound thm
R35338:35362 Equiv <> fold_constants_aexp_sound thm
R35392:35396 Imp <> aeval def
R35411:35415 Imp <> aeval def
R35458:35482 Equiv <> fold_constants_aexp_sound thm
R35392:35396 Imp <> aeval def
R35411:35415 Imp <> aeval def
R35458:35482 Equiv <> fold_constants_aexp_sound thm
R35458:35482 Equiv <> fold_constants_aexp_sound thm
R35669:35675 Coq.Arith.EqNat <> beq_nat syndef
R35669:35675 Coq.Arith.EqNat <> beq_nat syndef
R35773:35791 Equiv <> fold_constants_aexp def
R35773:35791 Equiv <> fold_constants_aexp def
R35830:35848 Equiv <> fold_constants_aexp def
R35830:35848 Equiv <> fold_constants_aexp def
R35886:35890 Imp <> aeval def
R35905:35909 Imp <> aeval def
R35952:35976 Equiv <> fold_constants_aexp_sound thm
R35886:35890 Imp <> aeval def
R35905:35909 Imp <> aeval def
R35952:35976 Equiv <> fold_constants_aexp_sound thm
R35952:35976 Equiv <> fold_constants_aexp_sound thm
R36006:36010 Imp <> aeval def
R36025:36029 Imp <> aeval def
R36072:36096 Equiv <> fold_constants_aexp_sound thm
R36006:36010 Imp <> aeval def
R36025:36029 Imp <> aeval def
R36072:36096 Equiv <> fold_constants_aexp_sound thm
R36072:36096 Equiv <> fold_constants_aexp_sound thm
R36218:36236 Equiv <> fold_constants_bexp def
R36218:36236 Equiv <> fold_constants_bexp def
R36345:36363 Equiv <> fold_constants_bexp def
R36345:36363 Equiv <> fold_constants_bexp def
R36402:36420 Equiv <> fold_constants_bexp def
R36402:36420 Equiv <> fold_constants_bexp def
prf 36671:36694 <> fold_constants_com_sound
R36700:36711 Equiv <> ctrans_sound def
R36713:36730 Equiv <> fold_constants_com def
R36749:36760 Equiv <> ctrans_sound def
R36816:36826 Equiv <> refl_cequiv thm
R36816:36826 Equiv <> refl_cequiv thm
R36849:36863 Equiv <> CAss_congruence thm
R36849:36863 Equiv <> CAss_congruence thm
R36886:36910 Equiv <> fold_constants_aexp_sound thm
R36886:36910 Equiv <> fold_constants_aexp_sound thm
R36932:36946 Equiv <> CSeq_congruence thm
R36932:36946 Equiv <> CSeq_congruence thm
R36987:36992 Equiv <> bequiv def
R36997:37015 Equiv <> fold_constants_bexp def
R36987:36992 Equiv <> bequiv def
R36997:37015 Equiv <> fold_constants_bexp def
R37036:37060 Equiv <> fold_constants_bexp_sound prfax
R37036:37060 Equiv <> fold_constants_bexp_sound prfax
R37079:37097 Equiv <> fold_constants_bexp def
R37129:37142 Equiv <> CIf_congruence thm
R37079:37097 Equiv <> fold_constants_bexp def
R37129:37142 Equiv <> CIf_congruence thm
R37129:37142 Equiv <> CIf_congruence thm
R37129:37142 Equiv <> CIf_congruence thm
R37129:37142 Equiv <> CIf_congruence thm
R37129:37142 Equiv <> CIf_congruence thm
R37129:37142 Equiv <> CIf_congruence thm
R37354:37365 Equiv <> trans_cequiv thm
R37354:37365 Equiv <> trans_cequiv thm
R37404:37411 Equiv <> IFB_true thm
R37404:37411 Equiv <> IFB_true thm
R37465:37476 Equiv <> trans_cequiv thm
R37465:37476 Equiv <> trans_cequiv thm
R37515:37523 Equiv <> IFB_false thm
R37515:37523 Equiv <> IFB_false thm
R37562:37567 Equiv <> bequiv def
R37572:37590 Equiv <> fold_constants_bexp def
R37562:37567 Equiv <> bequiv def
R37572:37590 Equiv <> fold_constants_bexp def
R37607:37631 Equiv <> fold_constants_bexp_sound prfax
R37607:37631 Equiv <> fold_constants_bexp_sound prfax
R37648:37666 Equiv <> fold_constants_bexp def
R37696:37712 Equiv <> CWhile_congruence thm
R37739:37748 Equiv <> WHILE_true thm
R37758:37768 Equiv <> WHILE_false thm
R37648:37666 Equiv <> fold_constants_bexp def
R37696:37712 Equiv <> CWhile_congruence thm
R37696:37712 Equiv <> CWhile_congruence thm
R37696:37712 Equiv <> CWhile_congruence thm
R37696:37712 Equiv <> CWhile_congruence thm
R37696:37712 Equiv <> CWhile_congruence thm
R37696:37712 Equiv <> CWhile_congruence thm
R37739:37748 Equiv <> WHILE_true thm
R37758:37768 Equiv <> WHILE_false thm
def 40228:40237 <> subst_aexp
R40244:40245 Maps <> id ind
R40253:40256 Imp <> aexp ind
R40264:40267 Imp <> aexp ind
R40272:40275 Imp <> aexp ind
R40288:40288 Equiv <> a var
R40299:40302 Imp <> ANum constr
R40321:40324 Imp <> ANum constr
R40332:40334 Imp <> AId constr
R40357:40362 Maps <> beq_id def
R40364:40364 Equiv <> i var
R40381:40383 Imp <> AId constr
R40374:40374 Equiv <> u var
R40392:40396 Imp <> APlus constr
R40414:40418 Imp <> APlus constr
R40441:40450 Equiv <> subst_aexp def
R40454:40454 Equiv <> u var
R40452:40452 Equiv <> i var
R40421:40430 Equiv <> subst_aexp def
R40434:40434 Equiv <> u var
R40432:40432 Equiv <> i var
R40464:40469 Imp <> AMinus constr
R40486:40491 Imp <> AMinus constr
R40514:40523 Equiv <> subst_aexp def
R40527:40527 Equiv <> u var
R40525:40525 Equiv <> i var
R40494:40503 Equiv <> subst_aexp def
R40507:40507 Equiv <> u var
R40505:40505 Equiv <> i var
R40537:40541 Imp <> AMult constr
R40559:40563 Imp <> AMult constr
R40586:40595 Equiv <> subst_aexp def
R40599:40599 Equiv <> u var
R40597:40597 Equiv <> i var
R40566:40575 Equiv <> subst_aexp def
R40579:40579 Equiv <> u var
R40577:40577 Equiv <> i var
def 40621:40633 <> subst_aexp_ex
R40716:40719 Coq.Init.Logic <> :type_scope:x_'='_x not
R40761:40761 Coq.Init.Logic <> :type_scope:x_'='_x not
R40639:40648 Equiv <> subst_aexp def
R40694:40698 Imp <> APlus constr
R40709:40711 Imp <> AId constr
R40713:40713 Imp <> X def
R40701:40703 Imp <> AId constr
R40705:40705 Imp <> Y def
R40653:40657 Imp <> APlus constr
R40670:40673 Imp <> ANum constr
R40660:40663 Imp <> ANum constr
R40650:40650 Imp <> X def
R40720:40724 Imp <> APlus constr
R40735:40739 Imp <> APlus constr
R40752:40755 Imp <> ANum constr
R40742:40745 Imp <> ANum constr
R40727:40729 Imp <> AId constr
R40731:40731 Imp <> Y def
def 40957:40976 <> subst_equiv_property
R41003:41008 Equiv <> cequiv def
R41053:41055 Imp <> ::x_';;'_x not
R41046:41050 Imp <> ::x_'::='_x not
R41044:41045 Equiv <> i1 var
R41051:41052 Equiv <> a1 var
R41058:41062 Imp <> ::x_'::='_x not
R41056:41057 Equiv <> i2 var
R41063:41072 Equiv <> subst_aexp def
R41080:41081 Equiv <> a2 var
R41077:41078 Equiv <> a1 var
R41074:41075 Equiv <> i1 var
R41020:41022 Imp <> ::x_';;'_x not
R41013:41017 Imp <> ::x_'::='_x not
R41011:41012 Equiv <> i1 var
R41018:41019 Equiv <> a1 var
R41025:41029 Imp <> ::x_'::='_x not
R41023:41024 Equiv <> i2 var
R41030:41031 Equiv <> a2 var
prf 42323:42335 <> subst_inequiv
R42341:42342 Coq.Init.Logic <> :type_scope:'~'_x not
R42343:42362 Equiv <> subst_equiv_property def
R42381:42400 Equiv <> subst_equiv_property def
R42611:42625 Imp <> ::x_';;'_x not
R42584:42588 Imp <> ::x_'::='_x not
R42583:42583 Imp <> X def
R42589:42593 Imp <> APlus constr
R42604:42607 Imp <> ANum constr
R42596:42598 Imp <> AId constr
R42600:42600 Imp <> X def
R42627:42631 Imp <> ::x_'::='_x not
R42626:42626 Imp <> Y def
R42632:42634 Imp <> AId constr
R42636:42636 Imp <> X def
R42611:42625 Imp <> ::x_';;'_x not
R42584:42588 Imp <> ::x_'::='_x not
R42583:42583 Imp <> X def
R42589:42593 Imp <> APlus constr
R42604:42607 Imp <> ANum constr
R42596:42598 Imp <> AId constr
R42600:42600 Imp <> X def
R42627:42631 Imp <> ::x_'::='_x not
R42626:42626 Imp <> Y def
R42632:42634 Imp <> AId constr
R42636:42636 Imp <> X def
R42692:42706 Imp <> ::x_';;'_x not
R42665:42669 Imp <> ::x_'::='_x not
R42664:42664 Imp <> X def
R42670:42674 Imp <> APlus constr
R42685:42688 Imp <> ANum constr
R42677:42679 Imp <> AId constr
R42681:42681 Imp <> X def
R42708:42712 Imp <> ::x_'::='_x not
R42707:42707 Imp <> Y def
R42713:42717 Imp <> APlus constr
R42728:42731 Imp <> ANum constr
R42720:42722 Imp <> AId constr
R42724:42724 Imp <> X def
R42692:42706 Imp <> ::x_';;'_x not
R42665:42669 Imp <> ::x_'::='_x not
R42664:42664 Imp <> X def
R42670:42674 Imp <> APlus constr
R42685:42688 Imp <> ANum constr
R42677:42679 Imp <> AId constr
R42681:42681 Imp <> X def
R42708:42712 Imp <> ::x_'::='_x not
R42707:42707 Imp <> Y def
R42713:42717 Imp <> APlus constr
R42728:42731 Imp <> ANum constr
R42720:42722 Imp <> AId constr
R42724:42724 Imp <> X def
R42760:42765 Equiv <> cequiv def
R42760:42765 Equiv <> cequiv def
R42982:42989 Maps <> t_update def
R43018:43018 Imp <> Y def
R42992:42999 Maps <> t_update def
R43013:43013 Imp <> X def
R43001:43011 Imp <> empty_state def
R42982:42989 Maps <> t_update def
R43018:43018 Imp <> Y def
R42992:42999 Maps <> t_update def
R43013:43013 Imp <> X def
R43001:43011 Imp <> empty_state def
R43043:43050 Maps <> t_update def
R43079:43079 Imp <> Y def
R43053:43060 Maps <> t_update def
R43074:43074 Imp <> X def
R43062:43072 Imp <> empty_state def
R43043:43050 Maps <> t_update def
R43079:43079 Imp <> Y def
R43053:43060 Maps <> t_update def
R43074:43074 Imp <> X def
R43062:43072 Imp <> empty_state def
R43108:43110 Imp <> ::x_'/'_x_'\\'_x not
R43122:43125 Imp <> ::x_'/'_x_'\\'_x not
R43111:43121 Imp <> empty_state def
R43148:43150 Imp <> ::x_'/'_x_'\\'_x not
R43162:43165 Imp <> ::x_'/'_x_'\\'_x not
R43151:43161 Imp <> empty_state def
R43219:43226 Maps <> t_update def
R43240:43240 Imp <> X def
R43228:43238 Imp <> empty_state def
R43199:43203 Imp <> E_Seq constr
R43260:43264 Imp <> E_Ass constr
R43108:43110 Imp <> ::x_'/'_x_'\\'_x not
R43122:43125 Imp <> ::x_'/'_x_'\\'_x not
R43111:43121 Imp <> empty_state def
R43148:43150 Imp <> ::x_'/'_x_'\\'_x not
R43162:43165 Imp <> ::x_'/'_x_'\\'_x not
R43151:43161 Imp <> empty_state def
R43148:43150 Imp <> ::x_'/'_x_'\\'_x not
R43162:43165 Imp <> ::x_'/'_x_'\\'_x not
R43151:43161 Imp <> empty_state def
R43219:43226 Maps <> t_update def
R43240:43240 Imp <> X def
R43228:43238 Imp <> empty_state def
R43199:43203 Imp <> E_Seq constr
R43260:43264 Imp <> E_Ass constr
R43260:43264 Imp <> E_Ass constr
R43219:43226 Maps <> t_update def
R43240:43240 Imp <> X def
R43228:43238 Imp <> empty_state def
R43199:43203 Imp <> E_Seq constr
R43260:43264 Imp <> E_Ass constr
R43260:43264 Imp <> E_Ass constr
R43219:43226 Maps <> t_update def
R43240:43240 Imp <> X def
R43228:43238 Imp <> empty_state def
R43199:43203 Imp <> E_Seq constr
R43260:43264 Imp <> E_Ass constr
R43260:43264 Imp <> E_Ass constr
R43219:43226 Maps <> t_update def
R43240:43240 Imp <> X def
R43228:43238 Imp <> empty_state def
R43199:43203 Imp <> E_Seq constr
R43419:43421 Coq.Init.Logic <> :type_scope:x_'='_x not
R43442:43460 Imp <> ceval_deterministic thm
R43465:43475 Imp <> empty_state def
R43419:43421 Coq.Init.Logic <> :type_scope:x_'='_x not
R43442:43460 Imp <> ceval_deterministic thm
R43465:43475 Imp <> empty_state def
R43517:43519 Coq.Init.Logic <> :type_scope:x_'='_x not
R43516:43516 Imp <> Y def
R43524:43524 Imp <> Y def
R43517:43519 Coq.Init.Logic <> :type_scope:x_'='_x not
R43516:43516 Imp <> Y def
R43524:43524 Imp <> Y def
ind 43932:43951 <> var_not_used_in_aexp
constr 43982:43987 <> VNUNum
constr 44036:44040 <> VNUId
constr 44098:44104 <> VNUPlus
constr 44238:44245 <> VNUMinus
constr 44380:44386 <> VNUMult
R43956:43957 Maps <> id ind
R43966:43969 Coq.Init.Logic <> :type_scope:x_'->'_x not
R43962:43965 Imp <> aexp ind
R44000:44019 Equiv <> var_not_used_in_aexp ind
R44024:44027 Imp <> ANum constr
R44029:44029 Equiv <> n var
R44059:44062 Coq.Init.Logic <> :type_scope:x_'->'_x not
R44063:44082 Equiv <> var_not_used_in_aexp ind
R44087:44089 Imp <> AId constr
R44091:44091 Equiv <> Y var
R44054:44057 Coq.Init.Logic <> :type_scope:x_'<>'_x not
R44058:44058 Equiv <> Y var
R44152:44161 Coq.Init.Logic <> :type_scope:x_'->'_x not
R44187:44196 Coq.Init.Logic <> :type_scope:x_'->'_x not
R44197:44216 Equiv <> var_not_used_in_aexp ind
R44221:44225 Imp <> APlus constr
R44230:44231 Equiv <> a2 var
R44227:44228 Equiv <> a1 var
R44162:44181 Equiv <> var_not_used_in_aexp ind
R44185:44186 Equiv <> a2 var
R44127:44146 Equiv <> var_not_used_in_aexp ind
R44150:44151 Equiv <> a1 var
R44293:44302 Coq.Init.Logic <> :type_scope:x_'->'_x not
R44328:44337 Coq.Init.Logic <> :type_scope:x_'->'_x not
R44338:44357 Equiv <> var_not_used_in_aexp ind
R44362:44367 Imp <> AMinus constr
R44372:44373 Equiv <> a2 var
R44369:44370 Equiv <> a1 var
R44303:44322 Equiv <> var_not_used_in_aexp ind
R44326:44327 Equiv <> a2 var
R44268:44287 Equiv <> var_not_used_in_aexp ind
R44291:44292 Equiv <> a1 var
R44434:44443 Coq.Init.Logic <> :type_scope:x_'->'_x not
R44469:44478 Coq.Init.Logic <> :type_scope:x_'->'_x not
R44479:44498 Equiv <> var_not_used_in_aexp ind
R44503:44507 Imp <> AMult constr
R44512:44513 Equiv <> a2 var
R44509:44510 Equiv <> a1 var
R44444:44463 Equiv <> var_not_used_in_aexp ind
R44467:44468 Equiv <> a2 var
R44409:44428 Equiv <> var_not_used_in_aexp ind
R44432:44433 Equiv <> a1 var
prf 44524:44538 <> aeval_weakening
R44586:44591 Coq.Init.Logic <> :type_scope:x_'->'_x not
R44618:44620 Coq.Init.Logic <> :type_scope:x_'='_x not
R44592:44596 Imp <> aeval def
R44617:44617 Equiv <> a var
R44599:44606 Maps <> t_update def
R44613:44614 Equiv <> ni var
R44611:44611 Equiv <> i var
R44608:44609 Equiv <> st var
R44621:44625 Imp <> aeval def
R44630:44630 Equiv <> a var
R44627:44628 Equiv <> st var
R44562:44581 Equiv <> var_not_used_in_aexp ind
R44585:44585 Equiv <> a var
R44583:44583 Equiv <> i var
prf 44930:44945 <> inequiv_exercise
R44950:44951 Coq.Init.Logic <> :type_scope:'~'_x not
R44952:44957 Equiv <> cequiv def
R44985:44988 Imp <> ::'SKIP' not
R44960:44965 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R44971:44974 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R44979:44982 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R44966:44970 Imp <> BTrue constr
R44975:44978 Imp <> ::'SKIP' not
mod 47096:47099 <> Himp
ind 47197:47199 Himp com
constr 47215:47219 Himp CSkip
constr 47231:47234 Himp CAss
constr 47260:47263 Himp CSeq
constr 47289:47291 Himp CIf
constr 47325:47330 Himp CWhile
constr 47357:47362 Himp CHavoc
R47223:47225 Equiv <> com ind
R47240:47243 Coq.Init.Logic <> :type_scope:x_'->'_x not
R47248:47251 Coq.Init.Logic <> :type_scope:x_'->'_x not
R47252:47254 Equiv <> com ind
R47244:47247 Imp <> aexp ind
R47238:47239 Maps <> id ind
R47270:47273 Coq.Init.Logic <> :type_scope:x_'->'_x not
R47277:47280 Coq.Init.Logic <> :type_scope:x_'->'_x not
R47281:47283 Equiv <> com ind
R47274:47276 Equiv <> com ind
R47267:47269 Equiv <> com ind
R47299:47302 Coq.Init.Logic <> :type_scope:x_'->'_x not
R47306:47309 Coq.Init.Logic <> :type_scope:x_'->'_x not
R47313:47316 Coq.Init.Logic <> :type_scope:x_'->'_x not
R47317:47319 Equiv <> com ind
R47310:47312 Equiv <> com ind
R47303:47305 Equiv <> com ind
R47295:47298 Imp <> bexp ind
R47338:47341 Coq.Init.Logic <> :type_scope:x_'->'_x not
R47345:47348 Coq.Init.Logic <> :type_scope:x_'->'_x not
R47349:47351 Equiv <> com ind
R47342:47344 Equiv <> com ind
R47334:47337 Imp <> bexp ind
R47368:47371 Coq.Init.Logic <> :type_scope:x_'->'_x not
R47372:47374 Equiv <> com ind
R47366:47367 Maps <> id ind
R47432:47436 Equiv Himp CSkip constr
not 47418:47418 Himp ::'SKIP'
R47466:47469 Equiv Himp CAss constr
not 47448:47448 Himp ::x_'::='_x
R47517:47520 Equiv Himp CSeq constr
not 47500:47500 Himp ::x_';;'_x
R47605:47610 Equiv Himp CWhile constr
not 47574:47574 Himp ::'WHILE'_x_'DO'_x_'END'
R47704:47706 Equiv Himp CIf constr
not 47662:47662 Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI'
R47779:47784 Equiv Himp CHavoc constr
not 47763:47763 Himp ::'HAVOC'_x
ind 48213:48217 Himp ceval
constr 48258:48263 Himp E_Skip
constr 48306:48310 Himp E_Ass
constr 48436:48440 Himp E_Seq
constr 48572:48579 Himp E_IfTrue
constr 48736:48744 Himp E_IfFalse
constr 48902:48913 Himp E_WhileFalse
constr 49032:49042 Himp E_WhileTrue
R48224:48227 Coq.Init.Logic <> :type_scope:x_'->'_x not
R48233:48236 Coq.Init.Logic <> :type_scope:x_'->'_x not
R48242:48245 Coq.Init.Logic <> :type_scope:x_'->'_x not
R48237:48241 Imp <> state def
R48228:48232 Imp <> state def
R48221:48223 Equiv Himp com ind
R49288:49292 Equiv <> ceval var
R48279:48283 Imp <> state def
R48290:48292 Equiv Himp ::x_'/'_x_'\\'_x not
R48295:48298 Equiv Himp ::x_'/'_x_'\\'_x not
R48286:48289 Equiv Himp ::'SKIP' not
R48293:48294 Equiv <> st var
R48299:48300 Equiv <> st var
R48327:48331 Imp <> state def
R48340:48343 Imp <> aexp ind
R48351:48353 Coq.Init.Datatypes <> nat ind
R48361:48362 Maps <> id ind
R48387:48396 Coq.Init.Logic <> :type_scope:x_'->'_x not
R48397:48397 Equiv Himp ::x_'/'_x_'\\'_x not
R48406:48409 Equiv Himp ::x_'/'_x_'\\'_x not
R48412:48415 Equiv Himp ::x_'/'_x_'\\'_x not
R48399:48403 Equiv Himp ::x_'::='_x not
R48398:48398 Equiv <> X var
R48404:48405 Equiv <> a1 var
R48410:48411 Equiv <> st var
R48416:48423 Maps <> t_update def
R48430:48430 Equiv <> n var
R48428:48428 Equiv <> X var
R48425:48426 Equiv <> st var
R48383:48385 Coq.Init.Logic <> :type_scope:x_'='_x not
R48372:48376 Imp <> aeval def
R48381:48382 Equiv <> a1 var
R48378:48379 Equiv <> st var
R48386:48386 Equiv <> n var
R48460:48462 Equiv Himp com ind
R48480:48484 Imp <> state def
R48508:48517 Coq.Init.Logic <> :type_scope:x_'->'_x not
R48534:48543 Coq.Init.Logic <> :type_scope:x_'->'_x not
R48544:48544 Equiv Himp ::x_'/'_x_'\\'_x not
R48553:48556 Equiv Himp ::x_'/'_x_'\\'_x not
R48559:48562 Equiv Himp ::x_'/'_x_'\\'_x not
R48547:48550 Equiv Himp ::x_';;'_x not
R48545:48546 Equiv <> c1 var
R48551:48552 Equiv <> c2 var
R48557:48558 Equiv <> st var
R48563:48566 Equiv <> st'' var
R48520:48522 Equiv Himp ::x_'/'_x_'\\'_x not
R48526:48529 Equiv Himp ::x_'/'_x_'\\'_x not
R48518:48519 Equiv <> c2 var
R48523:48525 Equiv <> st' var
R48530:48533 Equiv <> st'' var
R48496:48498 Equiv Himp ::x_'/'_x_'\\'_x not
R48501:48504 Equiv Himp ::x_'/'_x_'\\'_x not
R48494:48495 Equiv <> c1 var
R48499:48500 Equiv <> st var
R48505:48507 Equiv <> st' var
R48600:48604 Imp <> state def
R48613:48616 Imp <> bexp ind
R48628:48630 Equiv Himp com ind
R48658:48667 Coq.Init.Logic <> :type_scope:x_'->'_x not
R48682:48691 Coq.Init.Logic <> :type_scope:x_'->'_x not
R48692:48692 Equiv Himp ::x_'/'_x_'\\'_x not
R48718:48721 Equiv Himp ::x_'/'_x_'\\'_x not
R48724:48727 Equiv Himp ::x_'/'_x_'\\'_x not
R48693:48696 Equiv Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R48699:48704 Equiv Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R48707:48712 Equiv Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R48715:48717 Equiv Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R48697:48698 Equiv <> b1 var
R48705:48706 Equiv <> c1 var
R48713:48714 Equiv <> c2 var
R48722:48723 Equiv <> st var
R48728:48730 Equiv <> st' var
R48670:48672 Equiv Himp ::x_'/'_x_'\\'_x not
R48675:48678 Equiv Himp ::x_'/'_x_'\\'_x not
R48668:48669 Equiv <> c1 var
R48673:48674 Equiv <> st var
R48679:48681 Equiv <> st' var
R48651:48653 Coq.Init.Logic <> :type_scope:x_'='_x not
R48640:48644 Imp <> beval def
R48649:48650 Equiv <> b1 var
R48646:48647 Equiv <> st var
R48654:48657 Coq.Init.Datatypes <> true constr
R48765:48769 Imp <> state def
R48778:48781 Imp <> bexp ind
R48793:48795 Equiv Himp com ind
R48824:48833 Coq.Init.Logic <> :type_scope:x_'->'_x not
R48848:48857 Coq.Init.Logic <> :type_scope:x_'->'_x not
R48858:48858 Equiv Himp ::x_'/'_x_'\\'_x not
R48884:48887 Equiv Himp ::x_'/'_x_'\\'_x not
R48890:48893 Equiv Himp ::x_'/'_x_'\\'_x not
R48859:48862 Equiv Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R48865:48870 Equiv Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R48873:48878 Equiv Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R48881:48883 Equiv Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R48863:48864 Equiv <> b1 var
R48871:48872 Equiv <> c1 var
R48879:48880 Equiv <> c2 var
R48888:48889 Equiv <> st var
R48894:48896 Equiv <> st' var
R48836:48838 Equiv Himp ::x_'/'_x_'\\'_x not
R48841:48844 Equiv Himp ::x_'/'_x_'\\'_x not
R48834:48835 Equiv <> c2 var
R48839:48840 Equiv <> st var
R48845:48847 Equiv <> st' var
R48816:48818 Coq.Init.Logic <> :type_scope:x_'='_x not
R48805:48809 Imp <> beval def
R48814:48815 Equiv <> b1 var
R48811:48812 Equiv <> st var
R48819:48823 Coq.Init.Datatypes <> false constr
R48930:48933 Imp <> bexp ind
R48942:48946 Imp <> state def
R48955:48957 Equiv Himp com ind
R48986:48995 Coq.Init.Logic <> :type_scope:x_'->'_x not
R48996:48996 Equiv Himp ::x_'/'_x_'\\'_x not
R49015:49018 Equiv Himp ::x_'/'_x_'\\'_x not
R49021:49024 Equiv Himp ::x_'/'_x_'\\'_x not
R48997:49002 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R49005:49008 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R49011:49014 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R49003:49004 Equiv <> b1 var
R49009:49010 Equiv <> c1 var
R49019:49020 Equiv <> st var
R49025:49026 Equiv <> st var
R48978:48980 Coq.Init.Logic <> :type_scope:x_'='_x not
R48967:48971 Imp <> beval def
R48976:48977 Equiv <> b1 var
R48973:48974 Equiv <> st var
R48981:48985 Coq.Init.Datatypes <> false constr
R49068:49072 Imp <> state def
R49081:49084 Imp <> bexp ind
R49093:49095 Equiv Himp com ind
R49123:49132 Coq.Init.Logic <> :type_scope:x_'->'_x not
R49147:49156 Coq.Init.Logic <> :type_scope:x_'->'_x not
R49191:49200 Coq.Init.Logic <> :type_scope:x_'->'_x not
R49201:49201 Equiv Himp ::x_'/'_x_'\\'_x not
R49220:49223 Equiv Himp ::x_'/'_x_'\\'_x not
R49226:49229 Equiv Himp ::x_'/'_x_'\\'_x not
R49202:49207 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R49210:49213 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R49216:49219 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R49208:49209 Equiv <> b1 var
R49214:49215 Equiv <> c1 var
R49224:49225 Equiv <> st var
R49230:49233 Equiv <> st'' var
R49157:49157 Equiv Himp ::x_'/'_x_'\\'_x not
R49176:49179 Equiv Himp ::x_'/'_x_'\\'_x not
R49183:49186 Equiv Himp ::x_'/'_x_'\\'_x not
R49158:49163 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R49166:49169 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R49172:49175 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R49164:49165 Equiv <> b1 var
R49170:49171 Equiv <> c1 var
R49180:49182 Equiv <> st' var
R49187:49190 Equiv <> st'' var
R49135:49137 Equiv Himp ::x_'/'_x_'\\'_x not
R49140:49143 Equiv Himp ::x_'/'_x_'\\'_x not
R49133:49134 Equiv <> c1 var
R49138:49139 Equiv <> st var
R49144:49146 Equiv <> st' var
R49116:49118 Coq.Init.Logic <> :type_scope:x_'='_x not
R49105:49109 Imp <> beval def
R49114:49115 Equiv <> b1 var
R49111:49112 Equiv <> st var
R49119:49122 Coq.Init.Datatypes <> true constr
R49288:49292 Equiv Himp ceval ind
not 49263:49263 Himp ::x_'/'_x_'\\'_x
def 49407:49420 Himp havoc_example1
R49424:49424 Equiv Himp ::x_'/'_x_'\\'_x not
R49432:49435 Equiv Himp ::x_'/'_x_'\\'_x not
R49447:49450 Equiv Himp ::x_'/'_x_'\\'_x not
R49425:49430 Equiv Himp ::'HAVOC'_x not
R49431:49431 Imp <> X def
R49436:49446 Imp <> empty_state def
R49451:49458 Maps <> t_update def
R49472:49472 Imp <> X def
R49460:49470 Imp <> empty_state def
def 49522:49535 Himp havoc_example2
R49541:49541 Equiv Himp ::x_'/'_x_'\\'_x not
R49556:49559 Equiv Himp ::x_'/'_x_'\\'_x not
R49571:49574 Equiv Himp ::x_'/'_x_'\\'_x not
R49546:49548 Equiv Himp ::x_';;'_x not
R49542:49545 Equiv Himp ::'SKIP' not
R49549:49554 Equiv Himp ::'HAVOC'_x not
R49555:49555 Imp <> Z def
R49560:49570 Imp <> empty_state def
R49575:49582 Maps <> t_update def
R49596:49596 Imp <> Z def
R49584:49594 Imp <> empty_state def
def 49737:49742 Himp cequiv
R49753:49755 Equiv Himp com ind
R49784:49788 Imp <> state def
R49807:49811 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R49795:49797 Equiv Himp ::x_'/'_x_'\\'_x not
R49800:49803 Equiv Himp ::x_'/'_x_'\\'_x not
R49793:49794 Equiv <> c1 var
R49798:49799 Equiv <> st var
R49804:49806 Equiv <> st' var
R49814:49816 Equiv Himp ::x_'/'_x_'\\'_x not
R49819:49822 Equiv Himp ::x_'/'_x_'\\'_x not
R49812:49813 Equiv <> c2 var
R49817:49818 Equiv <> st var
R49823:49825 Equiv <> st' var
def 50042:50044 Himp pXY
R50058:50060 Equiv Himp ::x_';;'_x not
R50051:50056 Equiv Himp ::'HAVOC'_x not
R50057:50057 Imp <> X def
R50061:50066 Equiv Himp ::'HAVOC'_x not
R50067:50067 Imp <> Y def
def 50082:50084 Himp pYX
R50098:50100 Equiv Himp ::x_';;'_x not
R50091:50096 Equiv Himp ::'HAVOC'_x not
R50097:50097 Imp <> Y def
R50101:50106 Equiv Himp ::'HAVOC'_x not
R50107:50107 Imp <> X def
prf 50215:50228 Himp pXY_cequiv_pYX
R50248:50251 Coq.Init.Logic <> :type_scope:x_'\/'_x not
R50234:50239 Equiv Himp cequiv def
R50245:50247 Equiv Himp pYX def
R50241:50243 Equiv Himp pXY def
R50252:50252 Coq.Init.Logic <> :type_scope:'~'_x not
R50253:50258 Equiv Himp cequiv def
R50264:50266 Equiv Himp pYX def
R50260:50262 Equiv Himp pXY def
def 50432:50437 Himp ptwice
R50451:50453 Equiv Himp ::x_';;'_x not
R50444:50449 Equiv Himp ::'HAVOC'_x not
R50450:50450 Imp <> X def
R50454:50459 Equiv Himp ::'HAVOC'_x not
R50460:50460 Imp <> Y def
def 50475:50479 Himp pcopy
R50493:50495 Equiv Himp ::x_';;'_x not
R50486:50491 Equiv Himp ::'HAVOC'_x not
R50492:50492 Imp <> X def
R50497:50501 Equiv Himp ::x_'::='_x not
R50496:50496 Imp <> Y def
R50502:50504 Imp <> AId constr
R50506:50506 Imp <> X def
prf 50677:50695 Himp ptwice_cequiv_pcopy
R50720:50723 Coq.Init.Logic <> :type_scope:x_'\/'_x not
R50701:50706 Equiv Himp cequiv def
R50715:50719 Equiv Himp pcopy def
R50708:50713 Equiv Himp ptwice def
R50724:50724 Coq.Init.Logic <> :type_scope:'~'_x not
R50725:50730 Equiv Himp cequiv def
R50739:50743 Equiv Himp pcopy def
R50732:50737 Equiv Himp ptwice def
def 51446:51447 Himp p1
R51451:51453 Equiv Himp com ind
R51460:51466 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R51494:51502 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R51545:51550 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R51467:51470 Imp <> BNot constr
R51473:51475 Imp <> BEq constr
R51486:51489 Imp <> ANum constr
R51478:51480 Imp <> AId constr
R51482:51482 Imp <> X def
R51510:51516 Equiv Himp ::x_';;'_x not
R51503:51508 Equiv Himp ::'HAVOC'_x not
R51509:51509 Imp <> Y def
R51518:51522 Equiv Himp ::x_'::='_x not
R51517:51517 Imp <> X def
R51523:51527 Imp <> APlus constr
R51538:51541 Imp <> ANum constr
R51530:51532 Imp <> AId constr
R51534:51534 Imp <> X def
def 51565:51566 Himp p2
R51570:51572 Equiv Himp com ind
R51579:51585 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R51613:51621 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R51626:51631 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R51586:51589 Imp <> BNot constr
R51592:51594 Imp <> BEq constr
R51605:51608 Imp <> ANum constr
R51597:51599 Imp <> AId constr
R51601:51601 Imp <> X def
R51622:51625 Equiv Himp ::'SKIP' not
prf 51893:51906 Himp p1_may_diverge
R51934:51939 Coq.Init.Logic <> :type_scope:x_'->'_x not
R51940:51941 Coq.Init.Logic <> :type_scope:'~'_x not
R51944:51946 Equiv Himp ::x_'/'_x_'\\'_x not
R51949:51952 Equiv Himp ::x_'/'_x_'\\'_x not
R51942:51943 Equiv Himp p1 def
R51947:51948 Equiv <> st var
R51953:51955 Equiv <> st' var
R51929:51932 Coq.Init.Logic <> :type_scope:x_'<>'_x not
R51925:51926 Equiv <> st var
R51928:51928 Imp <> X def
prf 52001:52014 Himp p2_may_diverge
R52042:52047 Coq.Init.Logic <> :type_scope:x_'->'_x not
R52048:52049 Coq.Init.Logic <> :type_scope:'~'_x not
R52052:52054 Equiv Himp ::x_'/'_x_'\\'_x not
R52057:52060 Equiv Himp ::x_'/'_x_'\\'_x not
R52050:52051 Equiv Himp p2 def
R52055:52056 Equiv <> st var
R52061:52063 Equiv <> st' var
R52037:52040 Coq.Init.Logic <> :type_scope:x_'<>'_x not
R52033:52034 Equiv <> st var
R52036:52036 Imp <> X def
prf 52262:52272 Himp p1_p2_equiv
R52276:52281 Equiv Himp cequiv def
R52286:52287 Equiv Himp p2 def
R52283:52284 Equiv Himp p1 def
def 52558:52559 Himp p3
R52563:52565 Equiv Himp com ind
R52584:52588 Equiv Himp ::x_';;'_x not
R52573:52577 Equiv Himp ::x_'::='_x not
R52572:52572 Imp <> Z def
R52578:52581 Imp <> ANum constr
R52589:52595 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R52623:52631 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R52653:52658 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R52596:52599 Imp <> BNot constr
R52602:52604 Imp <> BEq constr
R52615:52618 Imp <> ANum constr
R52607:52609 Imp <> AId constr
R52611:52611 Imp <> X def
R52639:52645 Equiv Himp ::x_';;'_x not
R52632:52637 Equiv Himp ::'HAVOC'_x not
R52638:52638 Imp <> X def
R52646:52651 Equiv Himp ::'HAVOC'_x not
R52652:52652 Imp <> Z def
def 52673:52674 Himp p4
R52678:52680 Equiv Himp com ind
R52701:52705 Equiv Himp ::x_';;'_x not
R52688:52693 Equiv Himp ::x_'::='_x not
R52700:52700 Equiv Himp ::x_'::='_x not
R52687:52687 Imp <> X def
R52694:52697 Imp <> ANum constr
R52707:52712 Equiv Himp ::x_'::='_x not
R52719:52719 Equiv Himp ::x_'::='_x not
R52706:52706 Imp <> Z def
R52713:52716 Imp <> ANum constr
prf 52732:52744 Himp p3_p4_inequiv
R52748:52749 Coq.Init.Logic <> :type_scope:'~'_x not
R52750:52755 Equiv Himp cequiv def
R52760:52761 Equiv Himp p4 def
R52757:52758 Equiv Himp p3 def
def 53369:53370 Himp p5
R53374:53376 Equiv Himp com ind
R53383:53389 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R53417:53425 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R53433:53438 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R53390:53393 Imp <> BNot constr
R53396:53398 Imp <> BEq constr
R53409:53412 Imp <> ANum constr
R53401:53403 Imp <> AId constr
R53405:53405 Imp <> X def
R53426:53431 Equiv Himp ::'HAVOC'_x not
R53432:53432 Imp <> X def
def 53453:53454 Himp p6
R53458:53460 Equiv Himp com ind
R53468:53472 Equiv Himp ::x_'::='_x not
R53467:53467 Imp <> X def
R53473:53476 Imp <> ANum constr
prf 53491:53501 Himp p5_p6_equiv
R53505:53510 Equiv Himp cequiv def
R53515:53516 Equiv Himp p6 def
R53512:53513 Equiv Himp p5 def
R53570:53573 Equiv Himp <> mod
prf 54273:54303 <> swap_noninterfering_assignments
R54336:54341 Coq.Init.Logic <> :type_scope:x_'->'_x not
R54368:54373 Coq.Init.Logic <> :type_scope:x_'->'_x not
R54400:54405 Coq.Init.Logic <> :type_scope:x_'->'_x not
R54406:54411 Equiv <> cequiv def
R54455:54457 Imp <> ::x_';;'_x not
R54448:54452 Imp <> ::x_'::='_x not
R54446:54447 Equiv <> l2 var
R54453:54454 Equiv <> a2 var
R54460:54464 Imp <> ::x_'::='_x not
R54458:54459 Equiv <> l1 var
R54465:54466 Equiv <> a1 var
R54427:54429 Imp <> ::x_';;'_x not
R54420:54424 Imp <> ::x_'::='_x not
R54418:54419 Equiv <> l1 var
R54425:54426 Equiv <> a1 var
R54432:54436 Imp <> ::x_'::='_x not
R54430:54431 Equiv <> l2 var
R54437:54438 Equiv <> a2 var
R54374:54393 Equiv <> var_not_used_in_aexp ind
R54398:54399 Equiv <> a1 var
R54395:54396 Equiv <> l2 var
R54342:54361 Equiv <> var_not_used_in_aexp ind
R54366:54367 Equiv <> a2 var
R54363:54364 Equiv <> l1 var
R54330:54333 Coq.Init.Logic <> :type_scope:x_'<>'_x not
R54328:54329 Equiv <> l1 var
R54334:54335 Equiv <> l2 var
def 54954:54960 <> capprox
R54971:54973 Imp <> com ind
R55003:55007 Imp <> state def
R55027:55030 Coq.Init.Logic <> :type_scope:x_'->'_x not
R55033:55035 Imp <> ::x_'/'_x_'\\'_x not
R55038:55041 Imp <> ::x_'/'_x_'\\'_x not
R55031:55032 Equiv <> c2 var
R55036:55037 Equiv <> st var
R55042:55044 Equiv <> st' var
R55015:55017 Imp <> ::x_'/'_x_'\\'_x not
R55020:55023 Imp <> ::x_'/'_x_'\\'_x not
R55013:55014 Equiv <> c1 var
R55018:55019 Equiv <> st var
R55024:55026 Equiv <> st' var
def 55441:55442 <> c3
R55446:55448 Imp <> com ind
def 55526:55527 <> c4
R55531:55533 Imp <> com ind
prf 55609:55623 <> c3_c4_different
R55642:55645 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R55627:55628 Coq.Init.Logic <> :type_scope:'~'_x not
R55629:55635 Equiv <> capprox def
R55640:55641 Equiv <> c4 prfax
R55637:55638 Equiv <> c3 prfax
R55646:55647 Coq.Init.Logic <> :type_scope:'~'_x not
R55648:55654 Equiv <> capprox def
R55659:55660 Equiv <> c3 prfax
R55656:55657 Equiv <> c4 prfax
def 55780:55783 <> cmin
R55787:55789 Imp <> com ind
prf 55867:55878 <> cmin_minimal
R55892:55898 Equiv <> capprox def
R55905:55905 Equiv <> c var
R55900:55903 Equiv <> cmin prfax
def 56082:56086 <> zprop
R56093:56095 Imp <> com ind
prf 56181:56196 <> zprop_preserving
R56222:56225 Coq.Init.Logic <> :type_scope:x_'->'_x not
R56238:56241 Coq.Init.Logic <> :type_scope:x_'->'_x not
R56242:56246 Equiv <> zprop prfax
R56248:56249 Equiv <> c' var
R56226:56232 Equiv <> capprox def
R56236:56237 Equiv <> c' var
R56234:56234 Equiv <> c var
R56215:56219 Equiv <> zprop prfax
R56221:56221 Equiv <> c var
